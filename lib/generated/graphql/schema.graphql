schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "migrations"
"""
type migrations {
  executed_at: timestamp
  hash: String!
  id: Int!
  name: String!
}

"""
aggregated selection of "migrations"
"""
type migrations_aggregate {
  aggregate: migrations_aggregate_fields
  nodes: [migrations!]!
}

"""
aggregate fields of "migrations"
"""
type migrations_aggregate_fields {
  avg: migrations_avg_fields
  count(columns: [migrations_select_column!], distinct: Boolean): Int!
  max: migrations_max_fields
  min: migrations_min_fields
  stddev: migrations_stddev_fields
  stddev_pop: migrations_stddev_pop_fields
  stddev_samp: migrations_stddev_samp_fields
  sum: migrations_sum_fields
  var_pop: migrations_var_pop_fields
  var_samp: migrations_var_samp_fields
  variance: migrations_variance_fields
}

"""aggregate avg on columns"""
type migrations_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "migrations". All fields are combined with a logical 'AND'.
"""
input migrations_bool_exp {
  _and: [migrations_bool_exp!]
  _not: migrations_bool_exp
  _or: [migrations_bool_exp!]
  executed_at: timestamp_comparison_exp
  hash: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "migrations"
"""
enum migrations_constraint {
  """unique or primary key constraint"""
  migrations_name_key

  """unique or primary key constraint"""
  migrations_pkey
}

"""
input type for incrementing numeric columns in table "migrations"
"""
input migrations_inc_input {
  id: Int
}

"""
input type for inserting data into table "migrations"
"""
input migrations_insert_input {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

"""aggregate max on columns"""
type migrations_max_fields {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

"""aggregate min on columns"""
type migrations_min_fields {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

"""
response of any mutation on the table "migrations"
"""
type migrations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [migrations!]!
}

"""
on conflict condition type for table "migrations"
"""
input migrations_on_conflict {
  constraint: migrations_constraint!
  update_columns: [migrations_update_column!]! = []
  where: migrations_bool_exp
}

"""Ordering options when selecting data from "migrations"."""
input migrations_order_by {
  executed_at: order_by
  hash: order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: migrations"""
input migrations_pk_columns_input {
  id: Int!
}

"""
select columns of table "migrations"
"""
enum migrations_select_column {
  """column name"""
  executed_at

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "migrations"
"""
input migrations_set_input {
  executed_at: timestamp
  hash: String
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type migrations_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type migrations_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type migrations_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type migrations_sum_fields {
  id: Int
}

"""
update columns of table "migrations"
"""
enum migrations_update_column {
  """column name"""
  executed_at

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type migrations_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type migrations_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type migrations_variance_fields {
  id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "migrations"
  """
  delete_migrations(
    """filter the rows which have to be deleted"""
    where: migrations_bool_exp!
  ): migrations_mutation_response

  """
  delete single row from the table: "migrations"
  """
  delete_migrations_by_pk(id: Int!): migrations

  """
  delete data from the table: "org"
  """
  delete_org(
    """filter the rows which have to be deleted"""
    where: org_bool_exp!
  ): org_mutation_response

  """
  delete single row from the table: "org"
  """
  delete_org_by_pk(id: Int!): org

  """
  delete data from the table: "org_type"
  """
  delete_org_type(
    """filter the rows which have to be deleted"""
    where: org_type_bool_exp!
  ): org_type_mutation_response

  """
  delete single row from the table: "org_type"
  """
  delete_org_type_by_pk(value: String!): org_type

  """
  delete data from the table: "sec_company"
  """
  delete_sec_company(
    """filter the rows which have to be deleted"""
    where: sec_company_bool_exp!
  ): sec_company_mutation_response

  """
  delete single row from the table: "sec_company"
  """
  delete_sec_company_by_pk(cik: String!): sec_company

  """
  delete data from the table: "sec_filing"
  """
  delete_sec_filing(
    """filter the rows which have to be deleted"""
    where: sec_filing_bool_exp!
  ): sec_filing_mutation_response

  """
  delete data from the table: "sec_filing_attachment"
  """
  delete_sec_filing_attachment(
    """filter the rows which have to be deleted"""
    where: sec_filing_attachment_bool_exp!
  ): sec_filing_attachment_mutation_response

  """
  delete single row from the table: "sec_filing_attachment"
  """
  delete_sec_filing_attachment_by_pk(accession_number: String!, sequence: Int!): sec_filing_attachment

  """
  delete single row from the table: "sec_filing"
  """
  delete_sec_filing_by_pk(accession_number: String!): sec_filing

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: Int!): user

  """
  insert data into the table: "migrations"
  """
  insert_migrations(
    """the rows to be inserted"""
    objects: [migrations_insert_input!]!

    """on conflict condition"""
    on_conflict: migrations_on_conflict
  ): migrations_mutation_response

  """
  insert a single row into the table: "migrations"
  """
  insert_migrations_one(
    """the row to be inserted"""
    object: migrations_insert_input!

    """on conflict condition"""
    on_conflict: migrations_on_conflict
  ): migrations

  """
  insert data into the table: "org"
  """
  insert_org(
    """the rows to be inserted"""
    objects: [org_insert_input!]!

    """on conflict condition"""
    on_conflict: org_on_conflict
  ): org_mutation_response

  """
  insert a single row into the table: "org"
  """
  insert_org_one(
    """the row to be inserted"""
    object: org_insert_input!

    """on conflict condition"""
    on_conflict: org_on_conflict
  ): org

  """
  insert data into the table: "org_type"
  """
  insert_org_type(
    """the rows to be inserted"""
    objects: [org_type_insert_input!]!

    """on conflict condition"""
    on_conflict: org_type_on_conflict
  ): org_type_mutation_response

  """
  insert a single row into the table: "org_type"
  """
  insert_org_type_one(
    """the row to be inserted"""
    object: org_type_insert_input!

    """on conflict condition"""
    on_conflict: org_type_on_conflict
  ): org_type

  """
  insert data into the table: "sec_company"
  """
  insert_sec_company(
    """the rows to be inserted"""
    objects: [sec_company_insert_input!]!

    """on conflict condition"""
    on_conflict: sec_company_on_conflict
  ): sec_company_mutation_response

  """
  insert a single row into the table: "sec_company"
  """
  insert_sec_company_one(
    """the row to be inserted"""
    object: sec_company_insert_input!

    """on conflict condition"""
    on_conflict: sec_company_on_conflict
  ): sec_company

  """
  insert data into the table: "sec_filing"
  """
  insert_sec_filing(
    """the rows to be inserted"""
    objects: [sec_filing_insert_input!]!

    """on conflict condition"""
    on_conflict: sec_filing_on_conflict
  ): sec_filing_mutation_response

  """
  insert data into the table: "sec_filing_attachment"
  """
  insert_sec_filing_attachment(
    """the rows to be inserted"""
    objects: [sec_filing_attachment_insert_input!]!

    """on conflict condition"""
    on_conflict: sec_filing_attachment_on_conflict
  ): sec_filing_attachment_mutation_response

  """
  insert a single row into the table: "sec_filing_attachment"
  """
  insert_sec_filing_attachment_one(
    """the row to be inserted"""
    object: sec_filing_attachment_insert_input!

    """on conflict condition"""
    on_conflict: sec_filing_attachment_on_conflict
  ): sec_filing_attachment

  """
  insert a single row into the table: "sec_filing"
  """
  insert_sec_filing_one(
    """the row to be inserted"""
    object: sec_filing_insert_input!

    """on conflict condition"""
    on_conflict: sec_filing_on_conflict
  ): sec_filing

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "migrations"
  """
  update_migrations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: migrations_set_input

    """filter the rows which have to be updated"""
    where: migrations_bool_exp!
  ): migrations_mutation_response

  """
  update single row of the table: "migrations"
  """
  update_migrations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: migrations_set_input
    pk_columns: migrations_pk_columns_input!
  ): migrations

  """
  update data of the table: "org"
  """
  update_org(
    """increments the numeric columns with given value of the filtered values"""
    _inc: org_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: org_set_input

    """filter the rows which have to be updated"""
    where: org_bool_exp!
  ): org_mutation_response

  """
  update single row of the table: "org"
  """
  update_org_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: org_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: org_set_input
    pk_columns: org_pk_columns_input!
  ): org

  """
  update data of the table: "org_type"
  """
  update_org_type(
    """sets the columns of the filtered rows to the given values"""
    _set: org_type_set_input

    """filter the rows which have to be updated"""
    where: org_type_bool_exp!
  ): org_type_mutation_response

  """
  update single row of the table: "org_type"
  """
  update_org_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: org_type_set_input
    pk_columns: org_type_pk_columns_input!
  ): org_type

  """
  update data of the table: "sec_company"
  """
  update_sec_company(
    """sets the columns of the filtered rows to the given values"""
    _set: sec_company_set_input

    """filter the rows which have to be updated"""
    where: sec_company_bool_exp!
  ): sec_company_mutation_response

  """
  update single row of the table: "sec_company"
  """
  update_sec_company_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: sec_company_set_input
    pk_columns: sec_company_pk_columns_input!
  ): sec_company

  """
  update data of the table: "sec_filing"
  """
  update_sec_filing(
    """sets the columns of the filtered rows to the given values"""
    _set: sec_filing_set_input

    """filter the rows which have to be updated"""
    where: sec_filing_bool_exp!
  ): sec_filing_mutation_response

  """
  update data of the table: "sec_filing_attachment"
  """
  update_sec_filing_attachment(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sec_filing_attachment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sec_filing_attachment_set_input

    """filter the rows which have to be updated"""
    where: sec_filing_attachment_bool_exp!
  ): sec_filing_attachment_mutation_response

  """
  update single row of the table: "sec_filing_attachment"
  """
  update_sec_filing_attachment_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: sec_filing_attachment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sec_filing_attachment_set_input
    pk_columns: sec_filing_attachment_pk_columns_input!
  ): sec_filing_attachment

  """
  update single row of the table: "sec_filing"
  """
  update_sec_filing_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: sec_filing_set_input
    pk_columns: sec_filing_pk_columns_input!
  ): sec_filing

  """
  update data of the table: "user"
  """
  update_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "org"
"""
type org {
  auth0_connection_id: String!
  auth0_connection_name: String
  created_at: timestamptz
  id: Int!
  name: String!

  """An object relationship"""
  org_type: org_type!
  type: org_type_enum!
  updated_at: timestamptz

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!
}

"""
aggregated selection of "org"
"""
type org_aggregate {
  aggregate: org_aggregate_fields
  nodes: [org!]!
}

"""
aggregate fields of "org"
"""
type org_aggregate_fields {
  avg: org_avg_fields
  count(columns: [org_select_column!], distinct: Boolean): Int!
  max: org_max_fields
  min: org_min_fields
  stddev: org_stddev_fields
  stddev_pop: org_stddev_pop_fields
  stddev_samp: org_stddev_samp_fields
  sum: org_sum_fields
  var_pop: org_var_pop_fields
  var_samp: org_var_samp_fields
  variance: org_variance_fields
}

"""
order by aggregate values of table "org"
"""
input org_aggregate_order_by {
  avg: org_avg_order_by
  count: order_by
  max: org_max_order_by
  min: org_min_order_by
  stddev: org_stddev_order_by
  stddev_pop: org_stddev_pop_order_by
  stddev_samp: org_stddev_samp_order_by
  sum: org_sum_order_by
  var_pop: org_var_pop_order_by
  var_samp: org_var_samp_order_by
  variance: org_variance_order_by
}

"""
input type for inserting array relation for remote table "org"
"""
input org_arr_rel_insert_input {
  data: [org_insert_input!]!

  """on conflict condition"""
  on_conflict: org_on_conflict
}

"""aggregate avg on columns"""
type org_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "org"
"""
input org_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "org". All fields are combined with a logical 'AND'.
"""
input org_bool_exp {
  _and: [org_bool_exp!]
  _not: org_bool_exp
  _or: [org_bool_exp!]
  auth0_connection_id: String_comparison_exp
  auth0_connection_name: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  org_type: org_type_bool_exp
  type: org_type_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
  users: user_bool_exp
}

"""
unique or primary key constraints on table "org"
"""
enum org_constraint {
  """unique or primary key constraint"""
  org_auth0_id_key

  """unique or primary key constraint"""
  org_name_key

  """unique or primary key constraint"""
  org_pkey
}

"""
input type for incrementing numeric columns in table "org"
"""
input org_inc_input {
  id: Int
}

"""
input type for inserting data into table "org"
"""
input org_insert_input {
  auth0_connection_id: String
  auth0_connection_name: String
  created_at: timestamptz
  id: Int
  name: String
  org_type: org_type_obj_rel_insert_input
  type: org_type_enum
  updated_at: timestamptz
  users: user_arr_rel_insert_input
}

"""aggregate max on columns"""
type org_max_fields {
  auth0_connection_id: String
  auth0_connection_name: String
  created_at: timestamptz
  id: Int
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "org"
"""
input org_max_order_by {
  auth0_connection_id: order_by
  auth0_connection_name: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type org_min_fields {
  auth0_connection_id: String
  auth0_connection_name: String
  created_at: timestamptz
  id: Int
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "org"
"""
input org_min_order_by {
  auth0_connection_id: order_by
  auth0_connection_name: order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "org"
"""
type org_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [org!]!
}

"""
input type for inserting object relation for remote table "org"
"""
input org_obj_rel_insert_input {
  data: org_insert_input!

  """on conflict condition"""
  on_conflict: org_on_conflict
}

"""
on conflict condition type for table "org"
"""
input org_on_conflict {
  constraint: org_constraint!
  update_columns: [org_update_column!]! = []
  where: org_bool_exp
}

"""Ordering options when selecting data from "org"."""
input org_order_by {
  auth0_connection_id: order_by
  auth0_connection_name: order_by
  created_at: order_by
  id: order_by
  name: order_by
  org_type: org_type_order_by
  type: order_by
  updated_at: order_by
  users_aggregate: user_aggregate_order_by
}

"""primary key columns input for table: org"""
input org_pk_columns_input {
  id: Int!
}

"""
select columns of table "org"
"""
enum org_select_column {
  """column name"""
  auth0_connection_id

  """column name"""
  auth0_connection_name

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updated_at
}

"""
input type for updating data in table "org"
"""
input org_set_input {
  auth0_connection_id: String
  auth0_connection_name: String
  created_at: timestamptz
  id: Int
  name: String
  type: org_type_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type org_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "org"
"""
input org_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type org_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "org"
"""
input org_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type org_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "org"
"""
input org_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type org_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "org"
"""
input org_sum_order_by {
  id: order_by
}

"""
columns and relationships of "org_type"
"""
type org_type {
  comment: String

  """An array relationship"""
  orgs(
    """distinct select on columns"""
    distinct_on: [org_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_order_by!]

    """filter the rows returned"""
    where: org_bool_exp
  ): [org!]!

  """An aggregate relationship"""
  orgs_aggregate(
    """distinct select on columns"""
    distinct_on: [org_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_order_by!]

    """filter the rows returned"""
    where: org_bool_exp
  ): org_aggregate!
  value: String!
}

"""
aggregated selection of "org_type"
"""
type org_type_aggregate {
  aggregate: org_type_aggregate_fields
  nodes: [org_type!]!
}

"""
aggregate fields of "org_type"
"""
type org_type_aggregate_fields {
  count(columns: [org_type_select_column!], distinct: Boolean): Int!
  max: org_type_max_fields
  min: org_type_min_fields
}

"""
Boolean expression to filter rows from the table "org_type". All fields are combined with a logical 'AND'.
"""
input org_type_bool_exp {
  _and: [org_type_bool_exp!]
  _not: org_type_bool_exp
  _or: [org_type_bool_exp!]
  comment: String_comparison_exp
  orgs: org_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "org_type"
"""
enum org_type_constraint {
  """unique or primary key constraint"""
  org_type_pkey
}

enum org_type_enum {
  """Company"""
  company

  """Law Firm"""
  firm
}

"""
Boolean expression to compare columns of type "org_type_enum". All fields are combined with logical 'AND'.
"""
input org_type_enum_comparison_exp {
  _eq: org_type_enum
  _in: [org_type_enum!]
  _is_null: Boolean
  _neq: org_type_enum
  _nin: [org_type_enum!]
}

"""
input type for inserting data into table "org_type"
"""
input org_type_insert_input {
  comment: String
  orgs: org_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type org_type_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type org_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "org_type"
"""
type org_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [org_type!]!
}

"""
input type for inserting object relation for remote table "org_type"
"""
input org_type_obj_rel_insert_input {
  data: org_type_insert_input!

  """on conflict condition"""
  on_conflict: org_type_on_conflict
}

"""
on conflict condition type for table "org_type"
"""
input org_type_on_conflict {
  constraint: org_type_constraint!
  update_columns: [org_type_update_column!]! = []
  where: org_type_bool_exp
}

"""Ordering options when selecting data from "org_type"."""
input org_type_order_by {
  comment: order_by
  orgs_aggregate: org_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: org_type"""
input org_type_pk_columns_input {
  value: String!
}

"""
select columns of table "org_type"
"""
enum org_type_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "org_type"
"""
input org_type_set_input {
  comment: String
  value: String
}

"""
update columns of table "org_type"
"""
enum org_type_update_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
update columns of table "org"
"""
enum org_update_column {
  """column name"""
  auth0_connection_id

  """column name"""
  auth0_connection_name

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type org_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "org"
"""
input org_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type org_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "org"
"""
input org_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type org_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "org"
"""
input org_variance_order_by {
  id: order_by
}

type query_root {
  """
  fetch data from the table: "migrations"
  """
  migrations(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): [migrations!]!

  """
  fetch aggregated fields from the table: "migrations"
  """
  migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): migrations_aggregate!

  """fetch data from the table: "migrations" using primary key columns"""
  migrations_by_pk(id: Int!): migrations

  """
  fetch data from the table: "org"
  """
  org(
    """distinct select on columns"""
    distinct_on: [org_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_order_by!]

    """filter the rows returned"""
    where: org_bool_exp
  ): [org!]!

  """
  fetch aggregated fields from the table: "org"
  """
  org_aggregate(
    """distinct select on columns"""
    distinct_on: [org_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_order_by!]

    """filter the rows returned"""
    where: org_bool_exp
  ): org_aggregate!

  """fetch data from the table: "org" using primary key columns"""
  org_by_pk(id: Int!): org

  """
  fetch data from the table: "org_type"
  """
  org_type(
    """distinct select on columns"""
    distinct_on: [org_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_type_order_by!]

    """filter the rows returned"""
    where: org_type_bool_exp
  ): [org_type!]!

  """
  fetch aggregated fields from the table: "org_type"
  """
  org_type_aggregate(
    """distinct select on columns"""
    distinct_on: [org_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_type_order_by!]

    """filter the rows returned"""
    where: org_type_bool_exp
  ): org_type_aggregate!

  """fetch data from the table: "org_type" using primary key columns"""
  org_type_by_pk(value: String!): org_type

  """
  fetch data from the table: "sec_company"
  """
  sec_company(
    """distinct select on columns"""
    distinct_on: [sec_company_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_company_order_by!]

    """filter the rows returned"""
    where: sec_company_bool_exp
  ): [sec_company!]!

  """
  fetch aggregated fields from the table: "sec_company"
  """
  sec_company_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_company_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_company_order_by!]

    """filter the rows returned"""
    where: sec_company_bool_exp
  ): sec_company_aggregate!

  """fetch data from the table: "sec_company" using primary key columns"""
  sec_company_by_pk(cik: String!): sec_company

  """
  fetch data from the table: "sec_contract"
  """
  sec_contract(
    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): [sec_contract!]!

  """
  fetch aggregated fields from the table: "sec_contract"
  """
  sec_contract_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): sec_contract_aggregate!

  """
  fetch data from the table: "sec_filing"
  """
  sec_filing(
    """distinct select on columns"""
    distinct_on: [sec_filing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_order_by!]

    """filter the rows returned"""
    where: sec_filing_bool_exp
  ): [sec_filing!]!

  """
  fetch aggregated fields from the table: "sec_filing"
  """
  sec_filing_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_filing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_order_by!]

    """filter the rows returned"""
    where: sec_filing_bool_exp
  ): sec_filing_aggregate!

  """An array relationship"""
  sec_filing_attachment(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): [sec_filing_attachment!]!

  """An aggregate relationship"""
  sec_filing_attachment_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): sec_filing_attachment_aggregate!

  """
  fetch data from the table: "sec_filing_attachment" using primary key columns
  """
  sec_filing_attachment_by_pk(accession_number: String!, sequence: Int!): sec_filing_attachment

  """fetch data from the table: "sec_filing" using primary key columns"""
  sec_filing_by_pk(accession_number: String!): sec_filing

  """
  execute function "sec_search" which returns "sec_contract"
  """
  sec_search(
    """
    input parameters for function "sec_search"
    """
    args: sec_search_args!

    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): [sec_contract!]!

  """
  execute function "sec_search" and query aggregates on result of table type "sec_contract"
  """
  sec_search_aggregate(
    """
    input parameters for function "sec_search"
    """
    args: sec_search_args!

    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): sec_contract_aggregate!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user
}

"""
columns and relationships of "sec_company"
"""
type sec_company {
  cik: String!
  created_at: timestamptz
  geo: String!
  name: String!

  """An array relationship"""
  sec_filing_attachments(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): [sec_filing_attachment!]!

  """An aggregate relationship"""
  sec_filing_attachments_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): sec_filing_attachment_aggregate!

  """An array relationship"""
  sec_filings(
    """distinct select on columns"""
    distinct_on: [sec_filing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_order_by!]

    """filter the rows returned"""
    where: sec_filing_bool_exp
  ): [sec_filing!]!

  """An aggregate relationship"""
  sec_filings_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_filing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_order_by!]

    """filter the rows returned"""
    where: sec_filing_bool_exp
  ): sec_filing_aggregate!
  sic: String!
  sic_name: String!
  updated_at: timestamptz
}

"""
aggregated selection of "sec_company"
"""
type sec_company_aggregate {
  aggregate: sec_company_aggregate_fields
  nodes: [sec_company!]!
}

"""
aggregate fields of "sec_company"
"""
type sec_company_aggregate_fields {
  count(columns: [sec_company_select_column!], distinct: Boolean): Int!
  max: sec_company_max_fields
  min: sec_company_min_fields
}

"""
Boolean expression to filter rows from the table "sec_company". All fields are combined with a logical 'AND'.
"""
input sec_company_bool_exp {
  _and: [sec_company_bool_exp!]
  _not: sec_company_bool_exp
  _or: [sec_company_bool_exp!]
  cik: String_comparison_exp
  created_at: timestamptz_comparison_exp
  geo: String_comparison_exp
  name: String_comparison_exp
  sec_filing_attachments: sec_filing_attachment_bool_exp
  sec_filings: sec_filing_bool_exp
  sic: String_comparison_exp
  sic_name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sec_company"
"""
enum sec_company_constraint {
  """unique or primary key constraint"""
  sec_companies_pkey
}

"""
input type for inserting data into table "sec_company"
"""
input sec_company_insert_input {
  cik: String
  created_at: timestamptz
  geo: String
  name: String
  sec_filing_attachments: sec_filing_attachment_arr_rel_insert_input
  sec_filings: sec_filing_arr_rel_insert_input
  sic: String
  sic_name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type sec_company_max_fields {
  cik: String
  created_at: timestamptz
  geo: String
  name: String
  sic: String
  sic_name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type sec_company_min_fields {
  cik: String
  created_at: timestamptz
  geo: String
  name: String
  sic: String
  sic_name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "sec_company"
"""
type sec_company_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sec_company!]!
}

"""
input type for inserting object relation for remote table "sec_company"
"""
input sec_company_obj_rel_insert_input {
  data: sec_company_insert_input!

  """on conflict condition"""
  on_conflict: sec_company_on_conflict
}

"""
on conflict condition type for table "sec_company"
"""
input sec_company_on_conflict {
  constraint: sec_company_constraint!
  update_columns: [sec_company_update_column!]! = []
  where: sec_company_bool_exp
}

"""Ordering options when selecting data from "sec_company"."""
input sec_company_order_by {
  cik: order_by
  created_at: order_by
  geo: order_by
  name: order_by
  sec_filing_attachments_aggregate: sec_filing_attachment_aggregate_order_by
  sec_filings_aggregate: sec_filing_aggregate_order_by
  sic: order_by
  sic_name: order_by
  updated_at: order_by
}

"""primary key columns input for table: sec_company"""
input sec_company_pk_columns_input {
  cik: String!
}

"""
select columns of table "sec_company"
"""
enum sec_company_select_column {
  """column name"""
  cik

  """column name"""
  created_at

  """column name"""
  geo

  """column name"""
  name

  """column name"""
  sic

  """column name"""
  sic_name

  """column name"""
  updated_at
}

"""
input type for updating data in table "sec_company"
"""
input sec_company_set_input {
  cik: String
  created_at: timestamptz
  geo: String
  name: String
  sic: String
  sic_name: String
  updated_at: timestamptz
}

"""
update columns of table "sec_company"
"""
enum sec_company_update_column {
  """column name"""
  cik

  """column name"""
  created_at

  """column name"""
  geo

  """column name"""
  name

  """column name"""
  sic

  """column name"""
  sic_name

  """column name"""
  updated_at
}

"""
columns and relationships of "sec_contract"
"""
type sec_contract {
  accession_number: String
  attachment_type: String
  company_cik: String
  company_geo: String
  company_name: String
  company_sic: String
  company_sic_name: String
  description: String
  filing_date: date
  filing_header: String
  filing_type: String
  relevance: Float

  """An object relationship"""
  sec_company: sec_company

  """An object relationship"""
  sec_filing: sec_filing

  """An object relationship"""
  sec_filing_attachment: sec_filing_attachment
  sequence: Int
  tsv_search_text: tsvector

  """
  A computed field, executes function "sec_contract_uid"
  """
  uid: String
}

"""
aggregated selection of "sec_contract"
"""
type sec_contract_aggregate {
  aggregate: sec_contract_aggregate_fields
  nodes: [sec_contract!]!
}

"""
aggregate fields of "sec_contract"
"""
type sec_contract_aggregate_fields {
  avg: sec_contract_avg_fields
  count(columns: [sec_contract_select_column!], distinct: Boolean): Int!
  max: sec_contract_max_fields
  min: sec_contract_min_fields
  stddev: sec_contract_stddev_fields
  stddev_pop: sec_contract_stddev_pop_fields
  stddev_samp: sec_contract_stddev_samp_fields
  sum: sec_contract_sum_fields
  var_pop: sec_contract_var_pop_fields
  var_samp: sec_contract_var_samp_fields
  variance: sec_contract_variance_fields
}

"""aggregate avg on columns"""
type sec_contract_avg_fields {
  relevance: Float
  sequence: Float
}

"""
Boolean expression to filter rows from the table "sec_contract". All fields are combined with a logical 'AND'.
"""
input sec_contract_bool_exp {
  _and: [sec_contract_bool_exp!]
  _not: sec_contract_bool_exp
  _or: [sec_contract_bool_exp!]
  accession_number: String_comparison_exp
  attachment_type: String_comparison_exp
  company_cik: String_comparison_exp
  company_geo: String_comparison_exp
  company_name: String_comparison_exp
  company_sic: String_comparison_exp
  company_sic_name: String_comparison_exp
  description: String_comparison_exp
  filing_date: date_comparison_exp
  filing_header: String_comparison_exp
  filing_type: String_comparison_exp
  relevance: Float_comparison_exp
  sec_company: sec_company_bool_exp
  sec_filing: sec_filing_bool_exp
  sec_filing_attachment: sec_filing_attachment_bool_exp
  sequence: Int_comparison_exp
  tsv_search_text: tsvector_comparison_exp
  uid: String_comparison_exp
}

"""aggregate max on columns"""
type sec_contract_max_fields {
  accession_number: String
  attachment_type: String
  company_cik: String
  company_geo: String
  company_name: String
  company_sic: String
  company_sic_name: String
  description: String
  filing_date: date
  filing_header: String
  filing_type: String
  relevance: Float
  sequence: Int
}

"""aggregate min on columns"""
type sec_contract_min_fields {
  accession_number: String
  attachment_type: String
  company_cik: String
  company_geo: String
  company_name: String
  company_sic: String
  company_sic_name: String
  description: String
  filing_date: date
  filing_header: String
  filing_type: String
  relevance: Float
  sequence: Int
}

"""Ordering options when selecting data from "sec_contract"."""
input sec_contract_order_by {
  accession_number: order_by
  attachment_type: order_by
  company_cik: order_by
  company_geo: order_by
  company_name: order_by
  company_sic: order_by
  company_sic_name: order_by
  description: order_by
  filing_date: order_by
  filing_header: order_by
  filing_type: order_by
  relevance: order_by
  sec_company: sec_company_order_by
  sec_filing: sec_filing_order_by
  sec_filing_attachment: sec_filing_attachment_order_by
  sequence: order_by
  tsv_search_text: order_by
  uid: order_by
}

"""
select columns of table "sec_contract"
"""
enum sec_contract_select_column {
  """column name"""
  accession_number

  """column name"""
  attachment_type

  """column name"""
  company_cik

  """column name"""
  company_geo

  """column name"""
  company_name

  """column name"""
  company_sic

  """column name"""
  company_sic_name

  """column name"""
  description

  """column name"""
  filing_date

  """column name"""
  filing_header

  """column name"""
  filing_type

  """column name"""
  relevance

  """column name"""
  sequence

  """column name"""
  tsv_search_text
}

"""aggregate stddev on columns"""
type sec_contract_stddev_fields {
  relevance: Float
  sequence: Float
}

"""aggregate stddev_pop on columns"""
type sec_contract_stddev_pop_fields {
  relevance: Float
  sequence: Float
}

"""aggregate stddev_samp on columns"""
type sec_contract_stddev_samp_fields {
  relevance: Float
  sequence: Float
}

"""aggregate sum on columns"""
type sec_contract_sum_fields {
  relevance: Float
  sequence: Int
}

"""aggregate var_pop on columns"""
type sec_contract_var_pop_fields {
  relevance: Float
  sequence: Float
}

"""aggregate var_samp on columns"""
type sec_contract_var_samp_fields {
  relevance: Float
  sequence: Float
}

"""aggregate variance on columns"""
type sec_contract_variance_fields {
  relevance: Float
  sequence: Float
}

"""
columns and relationships of "sec_filing"
"""
type sec_filing {
  accession_number: String!
  cik: String!
  created_at: timestamptz
  filing_date: date!
  filing_type: String!
  header: String

  """An object relationship"""
  sec_company: sec_company!

  """An array relationship"""
  sec_filing_attachment(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): [sec_filing_attachment!]!

  """An aggregate relationship"""
  sec_filing_attachment_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): sec_filing_attachment_aggregate!
  updated_at: timestamptz
}

"""
aggregated selection of "sec_filing"
"""
type sec_filing_aggregate {
  aggregate: sec_filing_aggregate_fields
  nodes: [sec_filing!]!
}

"""
aggregate fields of "sec_filing"
"""
type sec_filing_aggregate_fields {
  count(columns: [sec_filing_select_column!], distinct: Boolean): Int!
  max: sec_filing_max_fields
  min: sec_filing_min_fields
}

"""
order by aggregate values of table "sec_filing"
"""
input sec_filing_aggregate_order_by {
  count: order_by
  max: sec_filing_max_order_by
  min: sec_filing_min_order_by
}

"""
input type for inserting array relation for remote table "sec_filing"
"""
input sec_filing_arr_rel_insert_input {
  data: [sec_filing_insert_input!]!

  """on conflict condition"""
  on_conflict: sec_filing_on_conflict
}

"""
columns and relationships of "sec_filing_attachment"
"""
type sec_filing_attachment {
  accession_number: String!
  attachment_type: String!
  cik: String!
  contents: String!
  created_at: timestamptz
  description: String
  filename: String

  """An object relationship"""
  sec_company: sec_company!

  """An object relationship"""
  sec_filing: sec_filing!
  sequence: Int!
  text: String
  tsv_search_text: tsvector
  updated_at: timestamptz
}

"""
aggregated selection of "sec_filing_attachment"
"""
type sec_filing_attachment_aggregate {
  aggregate: sec_filing_attachment_aggregate_fields
  nodes: [sec_filing_attachment!]!
}

"""
aggregate fields of "sec_filing_attachment"
"""
type sec_filing_attachment_aggregate_fields {
  avg: sec_filing_attachment_avg_fields
  count(columns: [sec_filing_attachment_select_column!], distinct: Boolean): Int!
  max: sec_filing_attachment_max_fields
  min: sec_filing_attachment_min_fields
  stddev: sec_filing_attachment_stddev_fields
  stddev_pop: sec_filing_attachment_stddev_pop_fields
  stddev_samp: sec_filing_attachment_stddev_samp_fields
  sum: sec_filing_attachment_sum_fields
  var_pop: sec_filing_attachment_var_pop_fields
  var_samp: sec_filing_attachment_var_samp_fields
  variance: sec_filing_attachment_variance_fields
}

"""
order by aggregate values of table "sec_filing_attachment"
"""
input sec_filing_attachment_aggregate_order_by {
  avg: sec_filing_attachment_avg_order_by
  count: order_by
  max: sec_filing_attachment_max_order_by
  min: sec_filing_attachment_min_order_by
  stddev: sec_filing_attachment_stddev_order_by
  stddev_pop: sec_filing_attachment_stddev_pop_order_by
  stddev_samp: sec_filing_attachment_stddev_samp_order_by
  sum: sec_filing_attachment_sum_order_by
  var_pop: sec_filing_attachment_var_pop_order_by
  var_samp: sec_filing_attachment_var_samp_order_by
  variance: sec_filing_attachment_variance_order_by
}

"""
input type for inserting array relation for remote table "sec_filing_attachment"
"""
input sec_filing_attachment_arr_rel_insert_input {
  data: [sec_filing_attachment_insert_input!]!

  """on conflict condition"""
  on_conflict: sec_filing_attachment_on_conflict
}

"""aggregate avg on columns"""
type sec_filing_attachment_avg_fields {
  sequence: Float
}

"""
order by avg() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_avg_order_by {
  sequence: order_by
}

"""
Boolean expression to filter rows from the table "sec_filing_attachment". All fields are combined with a logical 'AND'.
"""
input sec_filing_attachment_bool_exp {
  _and: [sec_filing_attachment_bool_exp!]
  _not: sec_filing_attachment_bool_exp
  _or: [sec_filing_attachment_bool_exp!]
  accession_number: String_comparison_exp
  attachment_type: String_comparison_exp
  cik: String_comparison_exp
  contents: String_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  filename: String_comparison_exp
  sec_company: sec_company_bool_exp
  sec_filing: sec_filing_bool_exp
  sequence: Int_comparison_exp
  text: String_comparison_exp
  tsv_search_text: tsvector_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sec_filing_attachment"
"""
enum sec_filing_attachment_constraint {
  """unique or primary key constraint"""
  sec_filing_attachment_accession_number_sequence_key

  """unique or primary key constraint"""
  sec_filing_attachment_pkey
}

"""
input type for incrementing numeric columns in table "sec_filing_attachment"
"""
input sec_filing_attachment_inc_input {
  sequence: Int
}

"""
input type for inserting data into table "sec_filing_attachment"
"""
input sec_filing_attachment_insert_input {
  accession_number: String
  attachment_type: String
  cik: String
  contents: String
  created_at: timestamptz
  description: String
  filename: String
  sec_company: sec_company_obj_rel_insert_input
  sec_filing: sec_filing_obj_rel_insert_input
  sequence: Int
  text: String
  tsv_search_text: tsvector
  updated_at: timestamptz
}

"""aggregate max on columns"""
type sec_filing_attachment_max_fields {
  accession_number: String
  attachment_type: String
  cik: String
  contents: String
  created_at: timestamptz
  description: String
  filename: String
  sequence: Int
  text: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_max_order_by {
  accession_number: order_by
  attachment_type: order_by
  cik: order_by
  contents: order_by
  created_at: order_by
  description: order_by
  filename: order_by
  sequence: order_by
  text: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type sec_filing_attachment_min_fields {
  accession_number: String
  attachment_type: String
  cik: String
  contents: String
  created_at: timestamptz
  description: String
  filename: String
  sequence: Int
  text: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_min_order_by {
  accession_number: order_by
  attachment_type: order_by
  cik: order_by
  contents: order_by
  created_at: order_by
  description: order_by
  filename: order_by
  sequence: order_by
  text: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "sec_filing_attachment"
"""
type sec_filing_attachment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sec_filing_attachment!]!
}

"""
on conflict condition type for table "sec_filing_attachment"
"""
input sec_filing_attachment_on_conflict {
  constraint: sec_filing_attachment_constraint!
  update_columns: [sec_filing_attachment_update_column!]! = []
  where: sec_filing_attachment_bool_exp
}

"""Ordering options when selecting data from "sec_filing_attachment"."""
input sec_filing_attachment_order_by {
  accession_number: order_by
  attachment_type: order_by
  cik: order_by
  contents: order_by
  created_at: order_by
  description: order_by
  filename: order_by
  sec_company: sec_company_order_by
  sec_filing: sec_filing_order_by
  sequence: order_by
  text: order_by
  tsv_search_text: order_by
  updated_at: order_by
}

"""primary key columns input for table: sec_filing_attachment"""
input sec_filing_attachment_pk_columns_input {
  accession_number: String!
  sequence: Int!
}

"""
select columns of table "sec_filing_attachment"
"""
enum sec_filing_attachment_select_column {
  """column name"""
  accession_number

  """column name"""
  attachment_type

  """column name"""
  cik

  """column name"""
  contents

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  filename

  """column name"""
  sequence

  """column name"""
  text

  """column name"""
  tsv_search_text

  """column name"""
  updated_at
}

"""
input type for updating data in table "sec_filing_attachment"
"""
input sec_filing_attachment_set_input {
  accession_number: String
  attachment_type: String
  cik: String
  contents: String
  created_at: timestamptz
  description: String
  filename: String
  sequence: Int
  text: String
  tsv_search_text: tsvector
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type sec_filing_attachment_stddev_fields {
  sequence: Float
}

"""
order by stddev() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_stddev_order_by {
  sequence: order_by
}

"""aggregate stddev_pop on columns"""
type sec_filing_attachment_stddev_pop_fields {
  sequence: Float
}

"""
order by stddev_pop() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_stddev_pop_order_by {
  sequence: order_by
}

"""aggregate stddev_samp on columns"""
type sec_filing_attachment_stddev_samp_fields {
  sequence: Float
}

"""
order by stddev_samp() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_stddev_samp_order_by {
  sequence: order_by
}

"""aggregate sum on columns"""
type sec_filing_attachment_sum_fields {
  sequence: Int
}

"""
order by sum() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_sum_order_by {
  sequence: order_by
}

"""
update columns of table "sec_filing_attachment"
"""
enum sec_filing_attachment_update_column {
  """column name"""
  accession_number

  """column name"""
  attachment_type

  """column name"""
  cik

  """column name"""
  contents

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  filename

  """column name"""
  sequence

  """column name"""
  text

  """column name"""
  tsv_search_text

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type sec_filing_attachment_var_pop_fields {
  sequence: Float
}

"""
order by var_pop() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_var_pop_order_by {
  sequence: order_by
}

"""aggregate var_samp on columns"""
type sec_filing_attachment_var_samp_fields {
  sequence: Float
}

"""
order by var_samp() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_var_samp_order_by {
  sequence: order_by
}

"""aggregate variance on columns"""
type sec_filing_attachment_variance_fields {
  sequence: Float
}

"""
order by variance() on columns of table "sec_filing_attachment"
"""
input sec_filing_attachment_variance_order_by {
  sequence: order_by
}

"""
Boolean expression to filter rows from the table "sec_filing". All fields are combined with a logical 'AND'.
"""
input sec_filing_bool_exp {
  _and: [sec_filing_bool_exp!]
  _not: sec_filing_bool_exp
  _or: [sec_filing_bool_exp!]
  accession_number: String_comparison_exp
  cik: String_comparison_exp
  created_at: timestamptz_comparison_exp
  filing_date: date_comparison_exp
  filing_type: String_comparison_exp
  header: String_comparison_exp
  sec_company: sec_company_bool_exp
  sec_filing_attachment: sec_filing_attachment_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "sec_filing"
"""
enum sec_filing_constraint {
  """unique or primary key constraint"""
  sec_filing_pkey
}

"""
input type for inserting data into table "sec_filing"
"""
input sec_filing_insert_input {
  accession_number: String
  cik: String
  created_at: timestamptz
  filing_date: date
  filing_type: String
  header: String
  sec_company: sec_company_obj_rel_insert_input
  sec_filing_attachment: sec_filing_attachment_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type sec_filing_max_fields {
  accession_number: String
  cik: String
  created_at: timestamptz
  filing_date: date
  filing_type: String
  header: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "sec_filing"
"""
input sec_filing_max_order_by {
  accession_number: order_by
  cik: order_by
  created_at: order_by
  filing_date: order_by
  filing_type: order_by
  header: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type sec_filing_min_fields {
  accession_number: String
  cik: String
  created_at: timestamptz
  filing_date: date
  filing_type: String
  header: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "sec_filing"
"""
input sec_filing_min_order_by {
  accession_number: order_by
  cik: order_by
  created_at: order_by
  filing_date: order_by
  filing_type: order_by
  header: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "sec_filing"
"""
type sec_filing_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sec_filing!]!
}

"""
input type for inserting object relation for remote table "sec_filing"
"""
input sec_filing_obj_rel_insert_input {
  data: sec_filing_insert_input!

  """on conflict condition"""
  on_conflict: sec_filing_on_conflict
}

"""
on conflict condition type for table "sec_filing"
"""
input sec_filing_on_conflict {
  constraint: sec_filing_constraint!
  update_columns: [sec_filing_update_column!]! = []
  where: sec_filing_bool_exp
}

"""Ordering options when selecting data from "sec_filing"."""
input sec_filing_order_by {
  accession_number: order_by
  cik: order_by
  created_at: order_by
  filing_date: order_by
  filing_type: order_by
  header: order_by
  sec_company: sec_company_order_by
  sec_filing_attachment_aggregate: sec_filing_attachment_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: sec_filing"""
input sec_filing_pk_columns_input {
  accession_number: String!
}

"""
select columns of table "sec_filing"
"""
enum sec_filing_select_column {
  """column name"""
  accession_number

  """column name"""
  cik

  """column name"""
  created_at

  """column name"""
  filing_date

  """column name"""
  filing_type

  """column name"""
  header

  """column name"""
  updated_at
}

"""
input type for updating data in table "sec_filing"
"""
input sec_filing_set_input {
  accession_number: String
  cik: String
  created_at: timestamptz
  filing_date: date
  filing_type: String
  header: String
  updated_at: timestamptz
}

"""
update columns of table "sec_filing"
"""
enum sec_filing_update_column {
  """column name"""
  accession_number

  """column name"""
  cik

  """column name"""
  created_at

  """column name"""
  filing_date

  """column name"""
  filing_type

  """column name"""
  header

  """column name"""
  updated_at
}

input sec_search_args {
  company_name_excludes: String
  company_name_includes: String
  description_excludes: String
  description_includes: String
  filing_date_gt: date
  filing_date_lt: date
  search: String
}

type subscription_root {
  """
  fetch data from the table: "migrations"
  """
  migrations(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): [migrations!]!

  """
  fetch aggregated fields from the table: "migrations"
  """
  migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [migrations_order_by!]

    """filter the rows returned"""
    where: migrations_bool_exp
  ): migrations_aggregate!

  """fetch data from the table: "migrations" using primary key columns"""
  migrations_by_pk(id: Int!): migrations

  """
  fetch data from the table: "org"
  """
  org(
    """distinct select on columns"""
    distinct_on: [org_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_order_by!]

    """filter the rows returned"""
    where: org_bool_exp
  ): [org!]!

  """
  fetch aggregated fields from the table: "org"
  """
  org_aggregate(
    """distinct select on columns"""
    distinct_on: [org_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_order_by!]

    """filter the rows returned"""
    where: org_bool_exp
  ): org_aggregate!

  """fetch data from the table: "org" using primary key columns"""
  org_by_pk(id: Int!): org

  """
  fetch data from the table: "org_type"
  """
  org_type(
    """distinct select on columns"""
    distinct_on: [org_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_type_order_by!]

    """filter the rows returned"""
    where: org_type_bool_exp
  ): [org_type!]!

  """
  fetch aggregated fields from the table: "org_type"
  """
  org_type_aggregate(
    """distinct select on columns"""
    distinct_on: [org_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [org_type_order_by!]

    """filter the rows returned"""
    where: org_type_bool_exp
  ): org_type_aggregate!

  """fetch data from the table: "org_type" using primary key columns"""
  org_type_by_pk(value: String!): org_type

  """
  fetch data from the table: "sec_company"
  """
  sec_company(
    """distinct select on columns"""
    distinct_on: [sec_company_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_company_order_by!]

    """filter the rows returned"""
    where: sec_company_bool_exp
  ): [sec_company!]!

  """
  fetch aggregated fields from the table: "sec_company"
  """
  sec_company_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_company_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_company_order_by!]

    """filter the rows returned"""
    where: sec_company_bool_exp
  ): sec_company_aggregate!

  """fetch data from the table: "sec_company" using primary key columns"""
  sec_company_by_pk(cik: String!): sec_company

  """
  fetch data from the table: "sec_contract"
  """
  sec_contract(
    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): [sec_contract!]!

  """
  fetch aggregated fields from the table: "sec_contract"
  """
  sec_contract_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): sec_contract_aggregate!

  """
  fetch data from the table: "sec_filing"
  """
  sec_filing(
    """distinct select on columns"""
    distinct_on: [sec_filing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_order_by!]

    """filter the rows returned"""
    where: sec_filing_bool_exp
  ): [sec_filing!]!

  """
  fetch aggregated fields from the table: "sec_filing"
  """
  sec_filing_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_filing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_order_by!]

    """filter the rows returned"""
    where: sec_filing_bool_exp
  ): sec_filing_aggregate!

  """An array relationship"""
  sec_filing_attachment(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): [sec_filing_attachment!]!

  """An aggregate relationship"""
  sec_filing_attachment_aggregate(
    """distinct select on columns"""
    distinct_on: [sec_filing_attachment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_filing_attachment_order_by!]

    """filter the rows returned"""
    where: sec_filing_attachment_bool_exp
  ): sec_filing_attachment_aggregate!

  """
  fetch data from the table: "sec_filing_attachment" using primary key columns
  """
  sec_filing_attachment_by_pk(accession_number: String!, sequence: Int!): sec_filing_attachment

  """fetch data from the table: "sec_filing" using primary key columns"""
  sec_filing_by_pk(accession_number: String!): sec_filing

  """
  execute function "sec_search" which returns "sec_contract"
  """
  sec_search(
    """
    input parameters for function "sec_search"
    """
    args: sec_search_args!

    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): [sec_contract!]!

  """
  execute function "sec_search" and query aggregates on result of table type "sec_contract"
  """
  sec_search_aggregate(
    """
    input parameters for function "sec_search"
    """
    args: sec_search_args!

    """distinct select on columns"""
    distinct_on: [sec_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sec_contract_order_by!]

    """filter the rows returned"""
    where: sec_contract_bool_exp
  ): sec_contract_aggregate!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: Int!): user
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar tsvector

"""
Boolean expression to compare columns of type "tsvector". All fields are combined with logical 'AND'.
"""
input tsvector_comparison_exp {
  _eq: tsvector
  _gt: tsvector
  _gte: tsvector
  _in: [tsvector!]
  _is_null: Boolean
  _lt: tsvector
  _lte: tsvector
  _neq: tsvector
  _nin: [tsvector!]
}

"""
columns and relationships of "user"
"""
type user {
  auth0_id: String!
  created_at: timestamptz!

  """An object relationship"""
  default_org: org!
  default_org_id: Int!
  email: String!
  family_name: String
  given_name: String
  id: Int!
  name: String!
  nickname: String
  photo_url: String
  updated_at: timestamptz!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  avg: user_avg_fields
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
  stddev: user_stddev_fields
  stddev_pop: user_stddev_pop_fields
  stddev_samp: user_stddev_samp_fields
  sum: user_sum_fields
  var_pop: user_var_pop_fields
  var_samp: user_var_samp_fields
  variance: user_variance_fields
}

"""
order by aggregate values of table "user"
"""
input user_aggregate_order_by {
  avg: user_avg_order_by
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
  stddev: user_stddev_order_by
  stddev_pop: user_stddev_pop_order_by
  stddev_samp: user_stddev_samp_order_by
  sum: user_sum_order_by
  var_pop: user_var_pop_order_by
  var_samp: user_var_samp_order_by
  variance: user_variance_order_by
}

"""
input type for inserting array relation for remote table "user"
"""
input user_arr_rel_insert_input {
  data: [user_insert_input!]!

  """on conflict condition"""
  on_conflict: user_on_conflict
}

"""aggregate avg on columns"""
type user_avg_fields {
  default_org_id: Float
  id: Float
}

"""
order by avg() on columns of table "user"
"""
input user_avg_order_by {
  default_org_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  auth0_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  default_org: org_bool_exp
  default_org_id: Int_comparison_exp
  email: String_comparison_exp
  family_name: String_comparison_exp
  given_name: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  nickname: String_comparison_exp
  photo_url: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """unique or primary key constraint"""
  user_auth0_id_key

  """unique or primary key constraint"""
  user_id_key

  """unique or primary key constraint"""
  users_email_key

  """unique or primary key constraint"""
  users_pkey
}

"""
input type for incrementing numeric columns in table "user"
"""
input user_inc_input {
  default_org_id: Int
  id: Int
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  auth0_id: String
  created_at: timestamptz
  default_org: org_obj_rel_insert_input
  default_org_id: Int
  email: String
  family_name: String
  given_name: String
  id: Int
  name: String
  nickname: String
  photo_url: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type user_max_fields {
  auth0_id: String
  created_at: timestamptz
  default_org_id: Int
  email: String
  family_name: String
  given_name: String
  id: Int
  name: String
  nickname: String
  photo_url: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "user"
"""
input user_max_order_by {
  auth0_id: order_by
  created_at: order_by
  default_org_id: order_by
  email: order_by
  family_name: order_by
  given_name: order_by
  id: order_by
  name: order_by
  nickname: order_by
  photo_url: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type user_min_fields {
  auth0_id: String
  created_at: timestamptz
  default_org_id: Int
  email: String
  family_name: String
  given_name: String
  id: Int
  name: String
  nickname: String
  photo_url: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "user"
"""
input user_min_order_by {
  auth0_id: order_by
  created_at: order_by
  default_org_id: order_by
  email: order_by
  family_name: order_by
  given_name: order_by
  id: order_by
  name: order_by
  nickname: order_by
  photo_url: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
on conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  auth0_id: order_by
  created_at: order_by
  default_org: org_order_by
  default_org_id: order_by
  email: order_by
  family_name: order_by
  given_name: order_by
  id: order_by
  name: order_by
  nickname: order_by
  photo_url: order_by
  updated_at: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: Int!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  auth0_id

  """column name"""
  created_at

  """column name"""
  default_org_id

  """column name"""
  email

  """column name"""
  family_name

  """column name"""
  given_name

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nickname

  """column name"""
  photo_url

  """column name"""
  updated_at
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  auth0_id: String
  created_at: timestamptz
  default_org_id: Int
  email: String
  family_name: String
  given_name: String
  id: Int
  name: String
  nickname: String
  photo_url: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type user_stddev_fields {
  default_org_id: Float
  id: Float
}

"""
order by stddev() on columns of table "user"
"""
input user_stddev_order_by {
  default_org_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type user_stddev_pop_fields {
  default_org_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "user"
"""
input user_stddev_pop_order_by {
  default_org_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type user_stddev_samp_fields {
  default_org_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "user"
"""
input user_stddev_samp_order_by {
  default_org_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type user_sum_fields {
  default_org_id: Int
  id: Int
}

"""
order by sum() on columns of table "user"
"""
input user_sum_order_by {
  default_org_id: order_by
  id: order_by
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  auth0_id

  """column name"""
  created_at

  """column name"""
  default_org_id

  """column name"""
  email

  """column name"""
  family_name

  """column name"""
  given_name

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nickname

  """column name"""
  photo_url

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type user_var_pop_fields {
  default_org_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "user"
"""
input user_var_pop_order_by {
  default_org_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type user_var_samp_fields {
  default_org_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "user"
"""
input user_var_samp_order_by {
  default_org_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type user_variance_fields {
  default_org_id: Float
  id: Float
}

"""
order by variance() on columns of table "user"
"""
input user_variance_order_by {
  default_org_id: order_by
  id: order_by
}

